#+TITLE: Tal (via Lua)
* To Provide Some Context
Tal is the assembly language used to construct programs
written in Uxn. Uxn is the VM used to sequence gestures
in GestVM. GestVM is the gesture synthesizer of choice
when building things for Gestlings.

Similar to how sounds are made in LIL via Lua metaprogramming,
the goal of this document is to build an interface that
generates Tal code from Lua.

Much of this is based off of the code found in @!(ref
"simple_path")!@.
* Tangled Files
#+NAME: tal.lua
#+BEGIN_SRC lua :tangle tal/tal.lua
local tal = {}
function tal.macro(words, name, program)
    table.insert(words, "%" .. name)
    table.insert(words, "{")
    for _,v in pairs(program)
    do
        table.insert(words, v)
    end
    table.insert(words, "}")
end

function tal.label(words, label)
    table.insert(words, "@" .. label)
end

function tal.num(words, val)
    table.insert(words, "#" .. string.format("%02x", val))
end

function tal.note(words, note)
    table.insert(words, "#" .. string.format("%02x", note))
    table.insert(words, "NOTE")
    table.insert(words, "BRK")
end

function tal.dur(words, num, den)
    tal.num(words, num)
    table.insert(words, "NUM")
    tal.num(words, den)
    table.insert(words, "DEN")
end

function tal.behavior(words, id)
    tal.num(words, id)
    table.insert(words, "BHVR")
end

function tal.jump(words, label)
    table.insert(words, ";" .. label)
    table.insert(words, "JMP2")
end

function tal.membuf(bufname)
    lil(string.format("gmemnew %s", bufname))
end

function tal.compile(program, bufname, gvmname)
    gestvm_compile(bufname, program)
    lil("gmemcpy [grab " .. 
        bufname .. 
        "] " .. 
        gvmname)
end

return tal
#+END_SRC
