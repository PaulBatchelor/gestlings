#+TITLE: Protogestling
@!(tocgen "protogestling")!@
The first Gestling. Or, the thing that will lead up to the
first gestling.

* The Rendered Video
@!(video "/res/protogestling.mp4")!@

* C code
This is the drawing code needed to make the protogestling
face. It uses SDFs to draw the primitives, which are then
rasterized to a btprnt canvas.

#+NAME: protogestling.c
#+BEGIN_SRC c :tangle protogestling/protogestling.c
#include <string.h>
#include "lua.h"
#include "lauxlib.h"
#include "lualib.h"

#include "mathc/mathc.h"
#include "sdf2d/sdf.h"
#include "btprnt/btprnt.h"

static void draw_ellipse(btprnt_region *r, float a, float b)
{
    int x, y;
    int w, h;
    float ratio;
    w = r->w;
    h = r->h;

    ratio = (float)w / h;

    if (ratio > 1) {
        ratio = 1.0 / ratio;
    }
    for (y = 0; y < h; y++) {
        for (x = 0; x < w; x++) {
            struct vec2 p;
            float d;
            struct vec2 res;
            struct vec2 ab;
            int c;
            res = svec2(w, h);

            p = sdf_normalize(svec2(x, y), res);
            p.x *= ratio;
            ab = svec2(a, b);
            d = sdf_ellipse(p, ab);

            if (isnan(d)) {
                printf("oops\n");
            }

            c = (int)(1 - sdf_sign(d));
            c = c != 0;
            if (c) {
                btprnt_region_draw(r, x, y, c);
            }
        }
    }
}

static void draw_face(btprnt_region *r,
                      double mouth_w,
                      double mouth_h,
                      double eye_left_w,
                      double eye_left_h,
                      double eye_right_w,
                      double eye_right_h)
{
    btprnt_region mouth;
    btprnt_region eyes[2];

    mouth = *r;

    mouth.y += mouth.h / 2;
    mouth.h = mouth.h / 2;
    eyes[0] = *r;
    eyes[0].w /= 2;
    eyes[0].h /= 2;
    eyes[1] = eyes[0];
    eyes[1].x += eyes[1].w;

    draw_ellipse(&mouth, mouth_w, mouth_h);
    draw_ellipse(&eyes[0], eye_left_w, eye_left_h);
    draw_ellipse(&eyes[1], eye_right_w, eye_right_h);
}

static int face(lua_State *L)
{
    btprnt_region *reg;
    double mouth_w;
    double mouth_h;
    double eye_left_w;
    double eye_left_h;
    double eye_right_w;
    double eye_right_h;
    reg = lua_touserdata(L, 1);
    mouth_w = lua_tonumber(L, 2);
    mouth_h = lua_tonumber(L, 3);
    eye_left_w = lua_tonumber(L, 4);
    eye_left_h = lua_tonumber(L, 5);
    eye_right_w = lua_tonumber(L, 6);
    eye_right_h = lua_tonumber(L, 7);
    draw_face(reg,
      mouth_w, mouth_h,
      eye_left_w, eye_left_h,
      eye_right_w, eye_right_h);
    return 0;
}

struct lil_bpfont;

btprnt_buf * lil_bpfont_buf(struct lil_bpfont *fnt);
int lil_bpfont_width(struct lil_bpfont *fnt);
int lil_bpfont_height(struct lil_bpfont *fnt);

static int textline(lua_State *L)
{
    btprnt_region *reg;
    struct lil_bpfont *fnt;
    int x, y;
    int clr, scale;
    const char *str;
    btprnt_buf *buf;
    int fw, fh;
    int sz;
    int n;
    int nargs;

    nargs = lua_gettop(L);
    reg = lua_touserdata(L, 1);
    fnt = lua_touserdata(L, 2);
    x = lua_tointeger(L, 3);
    y = lua_tointeger(L, 4);
    str = lua_tostring(L, 5);
    scale = lua_tointeger(L, 6);
    clr = lua_tointeger(L, 7);

    buf = lil_bpfont_buf(fnt);
    fw = lil_bpfont_width(fnt);
    fh = lil_bpfont_height(fnt);

    sz = strlen(str);
    if (nargs >= 8) {
        int tmp;
        tmp = lua_tointeger(L, 8);

        if (tmp < sz) {
            sz = tmp;
        }
    }

    for (n = 0; n < sz; n++) {
        btprnt_draw_char(reg, buf, x, y, fw, fh, str[n], scale, clr);
        x += fw * scale;
    }

    return 0;
}

static const luaL_Reg protogestling_lib[] = {
    {"face", face},
    {"textline", textline},
    {NULL, NULL}
};

int luaopen_protogestling(lua_State *L)
{
    luaL_newlib(L, protogestling_lib);
    return 1;
}
#+END_SRC
* Lua Mockup Code
This is the script that generates the video. It's prototype
code so things are... quite messy. But, it does enough
to get a sense of what a gestling could feel like, what's
currently possible, and what can potentially be improved.

#+NAME: protogestling_mockup.lua
#+BEGIN_SRC lua :tangle protogestling/protogestling_mockup.lua
blipsqueak = require("blipsqueak/blipsqueak")
val = valutil

-- setup audio
lil("blkset 49")
-- lil("valnew mouth")
-- lil("grab mouth")
-- lil("biscale [sine 0.2 1] 0 1")
-- lil("tog [metro 2]")
-- lil("valset2 zz zz")
-- lil("drop")
local bs = blipsqueak
comp = bs.components(bs.load_components())
bs.load_data(comp)
phrase = {"HELLO", "IAM", "PLEASED", "WELCOME"}
pitchseq = "h1/ k2~ h1/ d h i2~ h4_"
temposeq = "d1/ f d4 c"
bs.speak(comp, phrase, pitchseq, temposeq)
lil("mul zz [dblin -6]")
lil([[
dup; dup;
bigverb zz zz 0.8 8000
drop;
dcblocker zz
mul zz [dblin -20];
add zz zz
]])

os.execute("mkdir -p tmp res")
lil("wavout zz tmp/protogestling.wav")

lil("gfxnew gfx 200 320")
lil("grab gfx")
lil("gfxopen tmp/protogestling.h264")
lil([[
grab gfx
gfxclrset 1 0.0 0.0 0.0
gfxclrset 0 1.0 1.0 1.0
]])
lil([[
bpnew bp 200 320
# face
bpset [grab bp] 0 0 0 200 260
# text
bpset [grab bp] 1 0 260 200 60
# main
bpset [grab bp] 2 0 0 200 320

# bpoutline [bpget [grab bp] 0] 1
# bpoutline [bpget [grab bp] 1] 1
bpline [bpget [grab bp] 1] 0 0 200 0 1
bproundrect [bpget [grab bp] 2] 0 0 200 320 16 1
]])

lil("bpget [grab bp] 0")
face_reg = pop()
lil("bpfnt_default font")
lil("bpget [grab bp] 1")
msgbox_reg = pop()
lil("grab font")
font = pop()
lines = {
    "Why Hello there!",
    "I am a Proto-Gestling.",
    "Pleased to meet you.",
    "Welcome to Cauldronia!",
}

total_length = 0

for _,ln in pairs(lines) do
    total_length = total_length + #ln
end

function protoface(reg, shape)
    mouth = shape[1]
    left_eye = shape[2]
    right_eye = shape[3]
    protogestling.face(reg,
        mouth[1], mouth[2],
        left_eye[1], left_eye[2],
        right_eye[1], right_eye[2])
end

wide_mouth = {0.9, 0.3}
thin_mouth = {0.9, 0.1}
small_mouth = {0.1, 0.1}

big_eye = {0.3, 0.9}
round_eye = {0.3, 0.3}

thin_eye = {0.1, 0.9}

mouth_shapes = {
    -- 0
    {wide_mouth, big_eye, big_eye},
    -- 1
    {thin_mouth, round_eye, round_eye},
    -- 2
    {small_mouth, big_eye, round_eye},
    -- 3
    {wide_mouth, round_eye, big_eye},
    -- 4
    {thin_mouth, round_eye, big_eye},
    -- 5
    {small_mouth, thin_eye, thin_eye},
    -- 6
    {wide_mouth, round_eye, big_eye},
    -- 7
    {thin_mouth, round_eye, thin_eye},
    -- 8
    {small_mouth, thin_eye, round_eye},
}

test_shape = 0
prev_face = nil

function lerp(curval, target)
    local speed = 0.2
    curval = curval + ((target - curval) * speed)
    return curval
end

function lerp_face(curface, target)
    mouthlerp = {
        lerp(curface[1][1], target[1][1]),
        lerp(curface[1][2], target[1][2]),
    }
    leyelerp = {
        lerp(curface[2][1], target[2][1]),
        lerp(curface[2][2], target[2][2]),
    }
    reyelerp = {
        lerp(curface[3][1], target[3][1]),
        lerp(curface[3][2], target[3][2]),
    }
    return {
        mouthlerp, leyelerp, reyelerp
    }
end

local curface = nil

function draw_face()
    local shape = math.floor(val.get("mouth")) + 1
    -- local shape = test_shape + 1
    lil("bpfill [bpget [grab bp] 0] 0")

    if (curface == nil) then
        curface = mouth_shapes[shape]
    end

    curface = lerp_face(curface, mouth_shapes[shape])
    protoface(face_reg, curface)
    -- protogestling.face(face_reg, 0.9, 0.3, 0.3, 0.9, 0.3, 0.9)
    -- protogestling.face(face_reg, 0.9, 0.3, 0.3, 0.9, 0.3, 0.9)
end

function draw_textblock(lines, textpos)
    for pos, ln in pairs(lines) do
        local lnsz = #ln
        if textpos < lnsz then
            lnsz = textpos
        end
        protogestling.textline(msgbox_reg, font, 10, 10 + 10*(pos -1), ln, 1, 1, lnsz)
        textpos = textpos - lnsz
        if textpos <= 0 then
            return pos, lnsz
        end
    end
end

function get_next_char(lines, lpos, cpos)
    cpos = cpos + 1
    if cpos > #lines[lpos] then
        lpos = lpos + 1
        cpos = 1
    end

    if lpos > #lines then
        return nil
    end

    return string.char(string.byte(lines[lpos], cpos))
end

speed = 5
pause = 30
timer = speed

txtpos = 0
nframes = 60 * 10
fpos = 0
for n=1,nframes do
    if fpos == 0 then
        print(n)
        fpos = 60
        test_shape = test_shape + 1
        test_shape = test_shape % 9
    end
    fpos = fpos - 1
    lil("compute 15")
    draw_face()
    local lpos, cpos = draw_textblock(lines, txtpos)
    lil("bproundrect [bpget [grab bp] 2] 0 0 200 320 16 1")
    lil("grab gfx")
    lil("gfxfill 0")
    lil("bptr [grab bp] 0 0 200 320 0 0 1")
    lil("grab gfx")
    lil("gfxtransfer; dup")
    lil("gfxappend")

    timer = timer - 1

    if timer <= 0 then
        local nc = get_next_char(lines, lpos, cpos)
        if nc == '!' or nc == '.' then
            timer = pause
        else
            timer = speed
        end
        txtpos = txtpos + 1
        if txtpos > total_length then
            txtpos = total_length
        end
    end
end

lil("gfxclose")
lil("gfxmp4 tmp/protogestling.h264 tmp/protogestling.mp4")
os.execute("ffmpeg -y -i tmp/protogestling.mp4 -i tmp/protogestling.wav -pix_fmt yuv420p -acodec aac res/protogestling.mp4")
#+END_SRC
