#+TITLE: Descript
@!(tocgen "descript")!@
* Overview
Descript is the name the high-level markup language
used to build up Gestlings.

Descript is very dialogue-driven. A typical Descript
document consists of chunks of text, called blocks,
interleaved with instructions which correspond to
various actions.

#+NAME: descript.lua
#+BEGIN_SRC lua :tangle descript/descript.lua
Descript = {}
<<parser>>
return Descript
#+END_SRC
* Sample Descript Document
Consider this document below:

#+BEGIN_SRC txt
@hello world
this is a text block
spanning many lines
@block
here is another block

with some empty spaces

@and here
# is a comment
the previous line is a comment

@single_command
@another_single_command
@block
here is another block
#+END_SRC

While it doesn't actually do anything related to Gestling,
it does outline a structure that could eventually become
a Gestling. The same way HTML is a kind of XML, or a WAV
file is just a bunch of RIFF chunks.

Like the RIFF, describe breaks lines of text up into chunks.
A chunk starts with a line beginning with '@', which is
known as the header. Lines following that are in the chunk
until the next header is defined. Here the chunk headers
are 'hello world', 'block', 'and here', 'single_command',
'another_single_command', and 'block'.

Comments are lines that start with '#'. Lines that
are empty are ignored.
* Parser
Parsing in Descript is done one line at a time.

Descript breaks up lines into chunks.

#+NAME: parser
#+BEGIN_SRC lua
function split(val, sep)
    local sep = lpeg.P(sep)
    local elem = lpeg.C((1 - sep)^0)
    local lines = elem * (sep * elem)^0
    lines = lpeg.Ct(lines)
    return lpeg.match(lines, val)
end

function atfun (subject, pos, vals)
    local split_vals = split(vals, '\n')

    local new_vals = {}

    for i,v in pairs(split_vals) do
        if #v > 0 and string.byte(v, 1) ~= string.byte('#')  then
            table.insert(new_vals, v)
        end
    end

    if #new_vals == 0 then return true end
    return true, new_vals
end

function Descript.parse(str)
    local atsym = lpeg.P("@")
    local atelem = lpeg.C((1 - atsym)^0)
    local atelem = lpeg.Cmt(atelem, atfun)
    local atblock = (atsym * atelem)^0 * atelem
    local t = lpeg.match(lpeg.Ct(atblock), str)
    return t
end
#+END_SRC
