#+TITLE: Gestleton Map Generator
Generates map of Gestleton.
@!(tocgen "gestleton_mapgen")!@
* Tangled File
#+NAME: gestleton_mapgen.lua
#+BEGIN_SRC :tangle levels/gestleton/mapgen.lua
local GMapGen = {}
<<gestleton_mapgen>>
return GMapGen
#+END_SRC
* New
#+NAME: gestleton_mapgen
#+BEGIN_SRC lua
function GMapGen:new(o)
    o = o or {}
    o.tilemap = o.asset:load("levels/gestleton/tiles.b64")
    o.zoom = o.zoom or 2
    setmetatable(o, self)
    self.__index = self
    return o
end
#+END_SRC
* Draw
#+NAME: gestleton_mapgen
#+BEGIN_SRC lua
<<draw_routines>>
function GMapGen:draw(reg)
    draw(reg, self.tilemap, self.zoom)
end
#+END_SRC

#+NAME: draw_routines
#+BEGIN_SRC lua
function draw_tile(reg, tile, xpos, ypos, zoom)
    ypos = ypos * 8 * zoom
    xpos = xpos * 8 * zoom
    for y = 1, 8 do
        for x = 1, 8 do
            local row = tile[y]
            local val =
                row &
                ((1 << 2*(x - 1)) |
                 (1 << 2*(x - 1) + 1))
            val = val >> (2*(x - 1))
            local s= 0

            if val == 1 then s = 1 end
            for zy = 1,zoom do
                for zx = 1,zoom do
                    btprnt.draw(reg,
                        xpos + zoom*(x - 1) + (zx - 1),
                        ypos + zoom*(y - 1) + (zy - 1),
                        s)
                end
            end
        end
    end
end

function draw_box(reg, tilemap, x, y, w, h, zoom)
    -- draw corners
    local x2 = x + 1 + w
    local y2 = y + 1 + h
    draw_tile(reg, tilemap[1], x, y, zoom)
    draw_tile(reg, tilemap[2], x2, y, zoom)
    draw_tile(reg, tilemap[3], x2, y2, zoom)
    draw_tile(reg, tilemap[4], x, y2, zoom)

    -- draw edges
    for i = 1, h do
        draw_tile(reg, tilemap[5], x, y+i, zoom)
        draw_tile(reg, tilemap[6], x2, y+i, zoom)
    end
    for i = 1, w do
        draw_tile(reg, tilemap[8], x+i, y, zoom)
        draw_tile(reg, tilemap[7], x+i, y2, zoom)
    end
end

function draw(reg, tilemap, zoom)
    nrows = 32
    -- why 22 and not 24?
    ncols = 22
    draw_box(reg, tilemap, 0, 0, ncols - 2, nrows - 2, zoom)
    draw_box(reg, tilemap, ncols//2 - 4 - 1, nrows//2 - 6 - 1, 3, 3, zoom)
    draw_box(reg, tilemap, 4, 4, ncols - 8 - 2, nrows - 8 - 2, zoom)

    draw_box(reg, tilemap, 0, nrows - 6 - 1, 3, 3, zoom)
end
#+END_SRC
* Portals
Portals, AKA the clickable areas in the map that jump
to other pages.

#+NAME: gestleton_mapgen
#+BEGIN_SRC lua
function GMapGen:portals()
    nrows = 32
    ncols = 22
    scale = self.zoom * 8
    portals  = {
        {
            x = (ncols//2 - 4 - 1)*scale,
            y = (nrows//2 - 6 - 1)*scale,
            w = 5*scale,
            h = 5*scale,
            description = "just a small box.",
            page = "upper_rings"
        },
        {
            x = 0*scale,
            y = (nrows - 6 - 1)*scale,
            w = 5*scale,
            h = 5*scale,
            description = "junior!",
            page = "junior"
        },
    }

    return portals
end
#+END_SRC
* Render File
#+NAME: levels/gestling/render.lua
#+BEGIN_SRC lua :tangle levels/gestleton/render.lua
gmapgen = require("levels/gestleton/mapgen")
asset = require("asset/asset")
asset = asset.instantiate()
json = require("util/json")

function lilt(tab)
    lil(table.concat(tab, " "))
end

-- designed to fit nicely on mobile
width = 240 - 8*8
height = 320 - 8*8
zoom = 2

width = width * zoom
height = height * zoom

lilt{"bpnew", "bp", width, height}
lilt{"bpset", "[grab bp]", 0, 0, 0, width, height}
lil("bpget [grab bp] 0")
reg = pop()

map = gmapgen:new{asset=asset}

map:draw(reg)
lilt{"bppng", "[grab bp]", "res/gestleton.png"}

portals = map:portals()

portalfile = io.open("levels/gestleton/portals.json", "w")
portalfile:write(json.encode(portals))
portalfile:close()
#+END_SRC
