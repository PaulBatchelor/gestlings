#+TITLE: Gestleton Map Generator
Generates map of Gestleton.
@!(tocgen "gestleton_mapgen")!@
* Tangled Files
#+NAME: gestleton_mapgen.lua
#+BEGIN_SRC :tangle levels/gestleton/mapgen.lua
local GMapGen = {}
<<gestleton_mapgen>>
return GMapGen
#+END_SRC

#+NAME: gestleton_map_layer1.txt
#+BEGIN_SRC :tangle levels/gestleton/map_layer1.txt
<<map_layer1>>
#+END_SRC

#+NAME: gestleton_map_layer2.txt
#+BEGIN_SRC :tangle levels/gestleton/map_layer2.txt
<<map_layer2>>
#+END_SRC
* New
#+NAME: gestleton_mapgen
#+BEGIN_SRC lua
function GMapGen:new(o)
    o = o or {}
    o.tilemap = o.asset:load("levels/gestleton/tiles.b64")
    local palette = {
        a = 2,
        b = 3,
        -- grass
        c = 4,
        d = 5,
        e = 6,
        f = 7,
        -- dirt
        g = 8,
        h = 9,
        i = 10,
        j = 11,

        -- road
        k = 12,
        l = 13,

        -- junior (24x24 sprite)
        m = 14,
        n = 15,
        o = 16,
        p = 17,

        q = 18,
        r = 19,
        s = 20,
        t = 21,

        u = 22,
        v = 23,
        w = 24,
        x = 25,

        y = 26,
        z = 27,
        A = 28,
        B = 29,
    }

    palette["."] = 1
    o.palette = palette
    setmetatable(o, self)
    self.__index = self
    return o
end
#+END_SRC
* Draw
#+NAME: gestleton_mapgen
#+BEGIN_SRC lua
<<draw_routines>>
function GMapGen:draw(reg)
    draw_map(reg,
        self.palette,
        self.tilemap,
        "levels/gestleton/map_layer1.txt")
    draw_map(reg,
        self.palette,
        self.tilemap,
        "levels/gestleton/map_layer2.txt")
end
#+END_SRC

#+NAME: draw_routines
#+BEGIN_SRC lua
function draw_glyph(mainreg, tile, xpos, ypos)
    local width = 8
    for rowpos, row in pairs(tile) do
        rowstr = ""
        for x=1,width do
            local shft = (x - 1)*2
            local bits = ((row & (0x3 << shft)) >> shft)
            c = -1

            if bits == 1 then
                c = 1
            elseif bits == 0 then
                c = 0
            end

            if c >= 0 then
                btprnt.draw(mainreg,
                    xpos*8 + (x - 1),
                    ypos*8 + (rowpos - 1),
                    c)
            end
        end
    end
end

function draw_map(reg, palette, tiles, mapname)
    local map = io.open(mapname, "r")
    assert(map ~= nil, "could not open file:" .. mapname)
    rowpos = 0
    for line in map:lines() do
        for i=1,#line do
            local ch = string.char(string.byte(line, i))
            local tile_id = palette[ch]
            if tile_id ~= nil then
                draw_glyph(reg, tiles[tile_id].data, i-1, rowpos)
            end
        end
        rowpos = rowpos + 1
    end
end
#+END_SRC
* Portals
Portals, AKA the clickable areas in the map that jump
to other pages.

#+NAME: gestleton_mapgen
#+BEGIN_SRC lua
function GMapGen:portals()
    nrows = 32
    ncols = 22
    -- scale = self.zoom * 8
    scale = 8
    portals  = {
        -- {
        --     x = (ncols//2 - 4 - 1)*scale,
        --     y = (nrows//2 - 6 - 1)*scale,
        --     w = 5*scale,
        --     h = 5*scale,
        --     description = "just a small box.",
        --     page = "upper_rings"
        -- },
        {
            x = (7 - 1)*scale,
            y = (25 - 1)*scale,
            w = 6*scale,
            h = 6*scale,
            description = "junior!",
            page = "junior"
        },
    }

    -- return portals
    return portals
end
#+END_SRC
* Render File
#+NAME: levels/gestling/render.lua
#+BEGIN_SRC lua :tangle levels/gestleton/render.lua
gmapgen = require("levels/gestleton/mapgen")
asset = require("asset/asset")
asset = asset.instantiate()
json = require("util/json")

function lilt(tab)
    lil(table.concat(tab, " "))
end

width = 256
height = 256

lilt{"bpnew", "bp", width, height}
lilt{"bpset", "[grab bp]", 0, 0, 0, width, height}
lil("bpget [grab bp] 0")
reg = pop()

map = gmapgen:new{asset=asset}

map:draw(reg)
lilt{"bppng", "[grab bp]", "res/gestleton.png"}

portals = map:portals()

portalfile = io.open("levels/gestleton/portals.json", "w")
portalfile:write(json.encode(portals))
portalfile:close()
#+END_SRC
* Map Layers
** Layer 1
#+NAME: map_layer1
#+BEGIN_SRC txt
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbcdcdcdcdcdcdcdcdcdcdbbbbbb
bbbbbbefefefefefefefefefefbbbbbb
bbbbbbc...............iiiii.bbbb
bbbbbce...............iiiii..bbb
bbbbcdc..iii..........iiiii...bb
bbcccce.iiiii.................bb
bbcd....iiiii.................bb
bbcc...........................b
bbcd......aaaaaaaaaaaaa........b
bbcc......aefgi...ihcda........b
bbcd......aciaaaaaaaifa........b
bbcc......aefijiajiigga........b
bbcd......aggiaaaaaigga........b
bbcd......aghia...aigga........b
bb........aggia.a.aigga........b
bbc.......aggia...aigga........b
bbc.......acdiaaaaaigga........b
bbc.......aefgij...igga........b
bbc.......acdggi..ghgga........b
bbb.......aefef...gggga........b
bbb.......aaaaak.laaaaa........b
bbb............k.l............bb
bbb............k.l....ii......bb
bbb.....iiii...k.l...iiii.....bb
bbb....iiiiii..k.l....iiii..bbbb
bbbbb..iiiiiii.k.l..........bbbb
bbbbb..iiiii...k.l..........bbbb
bbbbbb.iiiiii..k.l........bbbbbb
bbbbbb..iiii...k.l........bbbbbb
bbbbbb.........k.l........bbbbbb
aaaaaaaaaa.....k.l....aaaaaaaaaa
#+END_SRC
** Layer 2
#+NAME: map_layer2
#+BEGIN_SRC txt
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
.......mnop.....................
.......qrst.....................
.......uvwx.....................
.......yzAB.....................
................................
................................
................................
#+END_SRC
