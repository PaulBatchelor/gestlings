#+TITLE: Mouth Tests
@!(img "/res/mouthtests.png")!@
@!(tocgen "mouthtests")!@
* Overview
This is a prototype for a parametrically controlled mouth
shape. This program experiments with a few configurations.
In theory, one could interpolate between all of these
mouth shapes.

The mouth shape is created using SDFs. It is composed
of a round quadrilateral with points and a circle
blendeded together. Points, rounded edge amount, blend,
and circle radius are all parametric.

A lot of new things had to be built for this, including
the "sdfvm" stuff to make it easier to prototype with
SDFs. There also wasn't any good way to get the SDFs
rendered into a btprnt region, so code for that exists
here as well.
* Tangled Code
#+NAME: mouthtests.c
#+BEGIN_SRC c :tangle avatar/mouth/mouthtests.c
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#include "btprnt/btprnt.h"

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#include "mathc/mathc.h"

#include "sdf2d/sdf.h"

#define SDF2D_SDFVM_PRIV
#include "sdf2d/sdfvm.h"

#define US_MAXTHREADS 8

void btprnt_png(btprnt *bp, const char *filename);

<<structs>>
<<drawing_threadpool>>
<<bytecode_generator>>
<<map_to_registers>>
<<core_mouth_program>>
<<mouthfuncs>>

int main(int argc, char *argv[])
{
    btprnt *bp;
    btprnt_region rmain;
    /* NOTE delibrately changed from 'reg' because
     * & + reg is an HTML escape code (&reg) and there's
     * no time to fix it in weewiki.
     */
    btprnt_region rg;
    int i;
    sdfvm_stacklet registers[16];
    uint8_t *program;
    size_t sz;

    bp = btprnt_new(512, 512);
    program = calloc(1, 128);

    sz = 0;
    generate_program(program, &sz, 128);
    btprnt_region_init(btprnt_canvas_get(bp),
                       &rmain, 0, 0,
                       512, 512);

    btprnt_layout_grid(&rmain, 4, 4, 0, 0, &rg);
    mouth1(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 1, 0, &rg);
    mouth2(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 2, 0, &rg);
    mouth1b(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 3, 0, &rg);
    mouth2b(&rg, registers, 16, program, sz);

    btprnt_layout_grid(&rmain, 4, 4, 0, 1, &rg);
    mouth3(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 1, 1, &rg);
    mouth3b(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 2, 1, &rg);
    mouth4(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 3, 1, &rg);
    mouth4b(&rg, registers, 16, program, sz);

    btprnt_layout_grid(&rmain, 4, 4, 0, 2, &rg);
    mouth5(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 1, 2, &rg);
    mouth1c(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 2, 2, &rg);
    mouth2c(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 3, 2, &rg);
    mouth6(&rg, registers, 16, program, sz);

    btprnt_layout_grid(&rmain, 4, 4, 0, 3, &rg);
    mouth7(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 1, 3, &rg);
    mouth7b(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 2, 3, &rg);
    mouth2d(&rg, registers, 16, program, sz);
    btprnt_layout_grid(&rmain, 4, 4, 3, 3, &rg);
    mouth1d(&rg, registers, 16, program, sz);

    for (i = 0; i < 4; i++) {
        btprnt_draw_hline(&rmain, 0, (i + 1)*128, 512, 1);
        btprnt_draw_vline(&rmain, (i + 1)*128, 0, 512, 1);
    }

    btprnt_png(bp, "res/mouthtests.png");

    btprnt_del(&bp);
    free(program);
    return 0;
}
#+END_SRC
* Structs
#+NAME: structs
#+BEGIN_SRC c
typedef struct {
    void *ud;
    struct vec4 region;
    btprnt_region *bpreg;
} image_data;

typedef struct thread_userdata thread_userdata;

typedef struct {
    image_data *data;
    int off;
    void (*draw)(float *, struct vec2, thread_userdata *);
    sdfvm vm;
} thread_data;

struct thread_userdata {
    thread_data *th;
    image_data *data;
};

typedef struct {
    struct vec2 points[4];
    float circleness;
    float roundedge;
    float circrad;
} mouthshape;

typedef struct {
    mouthshape m;
    sdfvm_stacklet *registers;
    int nregisters;
    const uint8_t *program;
    size_t sz;
} mouth_params;
#+END_SRC
* Drawing Threadpool
#+NAME: drawing_threadpool
#+BEGIN_SRC c
void *draw_thread(void *arg)
{
    thread_data *td;
    image_data *data;
    int x, y;
    int nthreads;
    int xstart, ystart;
    int xend, yend;
    struct vec4 *reg;
    thread_userdata thud;
    btprnt_region *bpreg;

    td = arg;
    data = td->data;

    reg = &data->region;

    bpreg = data->bpreg;

    ystart = td->off + reg->y;
    xstart = reg->x;
    xend = reg->z + reg->x;
    yend = reg->w + reg->y;

    /* This is hard-coded for now */
    nthreads = US_MAXTHREADS;

    thud.th = td;
    thud.data = data;
    for (y = ystart; y < yend; y+=nthreads) {
        for (x = xstart; x < xend; x++) {
            float c;
            int bit;

            c = 1.0;
            td->draw(&c, svec2(x - reg->x, y - reg->y), &thud);

            /* flipped because in btprnt 1 is black, 0 white */
            bit = c < 0.5 ? 1 : 0;
            btprnt_region_draw(bpreg, x, y, bit);
        }
    }

    return NULL;
}

void draw_with_stride(void (*drawfunc)(float *, struct vec2, thread_userdata *),
                      void *ud,
                      btprnt_region *bpreg)
{
    thread_data td[US_MAXTHREADS];
    pthread_t thread[US_MAXTHREADS];
    int t;
    image_data data;

    data.ud = ud;
    /* data.region = svec4(bpreg->x, bpreg->y, bpreg->w, bpreg->h); */
    /* I don't think btprnt offsets are needed, that's only for btprnt canvas */
    data.region = svec4(0, 0, bpreg->w, bpreg->h);
    data.bpreg = bpreg;

    for (t = 0; t < US_MAXTHREADS; t++) {
        td[t].data = &data;
        td[t].off = t;
        td[t].draw = drawfunc;
        sdfvm_init(&td[t].vm);
        pthread_create(&thread[t], NULL, draw_thread, &td[t]);
    }

    for (t = 0; t < US_MAXTHREADS; t++) {
        pthread_join(thread[t], NULL);
    }
}

void draw(void (*drawfunc)(float *, struct vec2, thread_userdata *),
          void *ud,
          btprnt_region *reg)
{
    draw_with_stride(drawfunc, ud, reg);
}
#+END_SRC
* SDFVM bytecode generator
The 
#+NAME: bytecode_generator
#+BEGIN_SRC c
static int add_float(uint8_t *prog, size_t *ppos, size_t maxsz, float val)
{
    uint8_t fdata[4];
    float *fptr;
    size_t pos;

    pos = *ppos;
    if ((pos + 4) > maxsz) return 1;

    fptr = (float *)fdata;
    *fptr = val;
    prog[pos++] = fdata[0];
    prog[pos++] = fdata[1];
    prog[pos++] = fdata[2];
    prog[pos++] = fdata[3];

    *ppos = pos;

    return 0;
}

void generate_program(uint8_t *prog, size_t *sz, size_t maxsz)
{
    size_t pos;
    int i;
    pos = 0;

    prog[pos++] = SDF_OP_POINT;
    for (i = 0; i < 4; i++) {
        prog[pos++] = SDF_OP_SCALAR;
        add_float(prog, &pos, maxsz, i);
        prog[pos++] = SDF_OP_REGISTER;
    }
    prog[pos++] = SDF_OP_POLY4;

    /* r5: rounded edge amount */
    prog[pos++] = SDF_OP_SCALAR;
    add_float(prog, &pos, maxsz, 5);
    prog[pos++] = SDF_OP_REGISTER;

    prog[pos++] = SDF_OP_ROUNDNESS;
    prog[pos++] = SDF_OP_POINT;

    /* r6: circle radius */
    prog[pos++] = SDF_OP_SCALAR;
    add_float(prog, &pos, maxsz, 6);
    prog[pos++] = SDF_OP_REGISTER;

    prog[pos++] = SDF_OP_CIRCLE;

    /* r4: circleness amount */
    prog[pos++] = SDF_OP_SCALAR;
    add_float(prog, &pos, maxsz, 4);
    prog[pos++] = SDF_OP_REGISTER;

    prog[pos++] = SDF_OP_LERP;
    prog[pos++] = SDF_OP_SCALAR;
    add_float(prog, &pos, maxsz, -1.0);
    prog[pos++] = SDF_OP_MUL;
    prog[pos++] = SDF_OP_GTZ;

    prog[pos++] = SDF_OP_COLOR;
    prog[pos++] = SDF_OP_VEC3;
    add_float(prog, &pos, maxsz, 0.0);
    add_float(prog, &pos, maxsz, 0.0);
    add_float(prog, &pos, maxsz, 0.0);
    prog[pos++] = SDF_OP_LERP3;

    *sz = pos;
}
#+END_SRC
* Mouthshape parameter mapping to SDFVM registers
#+NAME: map_to_registers
#+BEGIN_SRC c
void update_registers(sdfvm_stacklet *r, mouthshape *m)
{
    int i;
    struct vec2 *points;

    /* initialize registers */
    for (i = 0; i < 16; i++) {
        r[i].type = SDFVM_SCALAR;
        r[i].data.s = 0.0;
    }

    points = m->points;

    for (i = 0; i <= 3; i++) {
        r[i].type = SDFVM_VEC2;
        r[i].data.v2 = points[i];
    }

    /* register 4: "circleness" */
    r[4].type = SDFVM_SCALAR;
    r[4].data.s = m->circleness;

    /* register 5: "roundedge" */
    r[5].type = SDFVM_SCALAR;
    r[5].data.s = m->roundedge;

    /* register 6: "circrad" */
    r[6].type = SDFVM_SCALAR;
    r[6].data.s = m->circrad;
}
#+END_SRC
* Mouth Drawing Routines
** Core Mouth Program
#+NAME: core_mouth_program
#+BEGIN_SRC c
static void mouth1_program(sdfvm *vm,
                           struct vec2 p,
                           mouthshape *m,
                           float *fragColor,
                           const uint8_t *program,
                           size_t sz,
                           sdfvm_stacklet *registers,
                           int nregisters)
{
    float col;
    struct vec3 gray;

    gray = svec3(*fragColor, *fragColor, *fragColor);
    sdfvm_point_set(vm, p);
    sdfvm_color_set(vm, gray);
    sdfvm_registers(vm, registers, nregisters);
    sdfvm_execute(vm, program, sz);
    sdfvm_pop_vec3(vm, &gray);

    col = gray.x;
    *fragColor = col;
}

static void d_mouth1(float *fragColor,
                     struct vec2 st,
                     thread_userdata *thud)
{
    struct vec2 p;
    image_data *id;
    struct vec2 res;
    sdfvm *vm;
    mouth_params *mp;
    mouthshape *m;

    id = thud->data;
    vm = &thud->th->vm;

    mp = id->ud;
    m = &mp->m;

    res = svec2(id->region.z, id->region.w);
    sdfvm_push_vec2(vm, svec2(st.x, st.y));
    sdfvm_push_vec2(vm, res);
    sdfvm_normalize(vm);
    sdfvm_pop_vec2(vm, &p);
    p.y = p.y*-1;

    mouth1_program(vm, p, m, fragColor,
        mp->program, mp->sz,
        mp->registers, 16);
}
#+END_SRC
** mouth1
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth1(btprnt_region *reg,
            sdfvm_stacklet *registers,
            int nregisters,
            uint8_t *program,
            size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.1;
    m->roundedge = 0.1;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.5, 0.5);
    points[1] = svec2(-0.1, -0.5);
    points[2] = svec2(0.1, -0.5);
    points[3] = svec2(0.5, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth2
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth2(btprnt_region *reg,
            sdfvm_stacklet *registers,
            int nregisters,
            uint8_t *program,
            size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.1;
    m->roundedge = 0.1;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.1, 0.5);
    points[1] = svec2(-0.5, -0.5);
    points[2] = svec2(0.5, -0.5);
    points[3] = svec2(0.1, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth1b
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth1b(btprnt_region *reg,
             sdfvm_stacklet *registers,
             int nregisters,
             uint8_t *program,
             size_t sz)
{
    mouthshape *m;
    mouth_params mp;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.8;
    m->roundedge = 0.1;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.5, 0.5);
    points[1] = svec2(-0.1, -0.5);
    points[2] = svec2(0.1, -0.5);
    points[3] = svec2(0.5, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC

** mouth2b
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth2b(btprnt_region *reg,
             sdfvm_stacklet *registers,
             int nregisters,
             uint8_t *program,
             size_t sz)
{
    mouthshape *m;
    mouth_params mp;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.8;
    m->roundedge = 0.1;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.1, 0.5);
    points[1] = svec2(-0.5, -0.5);
    points[2] = svec2(0.5, -0.5);
    points[3] = svec2(0.1, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth3
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth3(btprnt_region *reg,
            sdfvm_stacklet *registers,
            int nregisters,
            uint8_t *program,
            size_t sz)
{
    mouthshape *m;
    mouth_params mp;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.0;
    m->roundedge = 0.08;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.5, 0.02);
    points[1] = svec2(-0.5, -0.02);
    points[2] = svec2(0.5, -0.02);
    points[3] = svec2(0.5, 0.02);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}

#+END_SRC
** mouth3b
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth3b(btprnt_region *reg,
            sdfvm_stacklet *registers,
            int nregisters,
            uint8_t *program,
            size_t sz)
{
    mouthshape *m;
    mouth_params mp;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.1;
    m->roundedge = 0.08;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.5, 0.02);
    points[1] = svec2(-0.5, -0.02);
    points[2] = svec2(0.5, -0.02);
    points[3] = svec2(0.5, 0.02);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth4
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth4(btprnt_region *reg,
            sdfvm_stacklet *registers,
            int nregisters,
            uint8_t *program,
            size_t sz)
{
    mouthshape *m;
    mouth_params mp;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.0;
    m->roundedge = 0.08;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.2, 0.6);
    points[1] = svec2(-0.02, -0.6);
    points[2] = svec2(0.02, -0.6);
    points[3] = svec2(0.2, 0.6);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth4b
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth4b(btprnt_region *reg,
             sdfvm_stacklet *registers,
             int nregisters,
             uint8_t *program,
             size_t sz)
{
    mouthshape *m;
    mouth_params mp;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.3;
    m->roundedge = 0.08;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.2, 0.6);
    points[1] = svec2(-0.02, -0.6);
    points[2] = svec2(0.02, -0.6);
    points[3] = svec2(0.2, 0.6);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth5
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth5(btprnt_region *reg,
            sdfvm_stacklet *registers,
            int nregisters,
            uint8_t *program,
            size_t sz)
{
    mouthshape *m;
    mouth_params mp;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.9;
    m->roundedge = 0.08;
    m->circrad = 0.3;
    points = m->points;
    points[0] = svec2(-0.5, 0.5);
    points[1] = svec2(-0.1, -0.5);
    points[2] = svec2(0.1, -0.5);
    points[3] = svec2(0.5, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth1c
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth1c(btprnt_region *reg,
             sdfvm_stacklet *registers,
             int nregisters,
             uint8_t *program,
             size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.0;
    m->roundedge = 0.0;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.5, 0.5);
    points[1] = svec2(-0.1, -0.5);
    points[2] = svec2(0.1, -0.5);
    points[3] = svec2(0.5, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}

#+END_SRC
** mouth2c
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth2c(btprnt_region *reg,
             sdfvm_stacklet *registers,
             int nregisters,
             uint8_t *program,
             size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.0;
    m->roundedge = 0.0;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.1, 0.5);
    points[1] = svec2(-0.5, -0.5);
    points[2] = svec2(0.5, -0.5);
    points[3] = svec2(0.1, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth6
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth6(btprnt_region *reg,
            sdfvm_stacklet *registers,
            int nregisters,
            uint8_t *program,
            size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.3;
    m->roundedge = 0.01;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.7, 0.7);
    points[1] = svec2(-0.4, -0.4);
    points[2] = svec2(0.4, -0.5);
    points[3] = svec2(0.5, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}

#+END_SRC
** mouth7
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth7(btprnt_region *reg,
            sdfvm_stacklet *registers,
            int nregisters,
            uint8_t *program,
            size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;
    float shearx;

    shearx = 0.2;
    m = &mp.m;
    m->circleness = 0.1;
    m->roundedge = 0.05;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.3 + shearx, 0.5);
    points[1] = svec2(-0.3 - shearx, -0.5);
    points[2] = svec2(0.3 - shearx, -0.5);
    points[3] = svec2(0.3 + shearx, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth7b
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth7b(btprnt_region *reg,
             sdfvm_stacklet *registers,
             int nregisters,
             uint8_t *program,
             size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;
    float shearx;

    shearx = 0.5;
    m = &mp.m;
    m->circleness = 0.0;
    m->roundedge = 0.1;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.3 - shearx, 0.5);
    points[1] = svec2(-0.3 + shearx, -0.5);
    points[2] = svec2(0.3 + shearx, -0.5);
    points[3] = svec2(0.3 - shearx, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
** mouth2d
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth2d(btprnt_region *reg,
             sdfvm_stacklet *registers,
             int nregisters,
             uint8_t *program,
             size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.1;
    m->roundedge = 0.1;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.1, 0.5);
    points[1] = svec2(-0.8, 0.3);
    points[2] = svec2(0.8, 0.3);
    points[3] = svec2(0.1, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}

#+END_SRC
** mouth1d
#+NAME: mouthfuncs
#+BEGIN_SRC c
void mouth1d(btprnt_region *reg,
             sdfvm_stacklet *registers,
             int nregisters,
             uint8_t *program,
             size_t sz)
{
    mouth_params mp;
    mouthshape *m;
    struct vec2 *points;

    m = &mp.m;
    m->circleness = 0.1;
    m->roundedge = 0.1;
    m->circrad = 0.7;
    points = m->points;
    points[0] = svec2(-0.8, 0.5);
    points[1] = svec2(-0.1, 0.3);
    points[2] = svec2(0.1, 0.3);
    points[3] = svec2(0.8, 0.5);

    update_registers(registers, m);
    mp.registers = registers;
    mp.nregisters = nregisters;
    mp.program = program;
    mp.sz = sz;
    draw(d_mouth1, &mp, reg);
}
#+END_SRC
