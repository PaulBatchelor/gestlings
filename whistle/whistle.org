#+TITLE: A synthetic whistle sound (WIP)
This program constructs a roughly pure tone sound with a
bit of breath in. The idea behind this instrument is
that it could be used for producing sounds with birdsong-like
qualities to it.

#+NAME: whistle.lua
#+BEGIN_SRC lua :tangle whistle/whistle.lua
Whistle = {}
<<oscillator>>
return Whistle
#+END_SRC

The core sound generator of the whistle sound is the
oscillator. This takes in 3 parameters in the form
of first-order functions: frequency, amplitude and
timbre.

#+NAME: oscillator
#+BEGIN_SRC lua
pprint = require("util/pprint")
function Whistle.osc(params)
    local sig = sig or params.sig
    local core = core or params.core
    local diagraf = diagraf or params.diagraf
    local node = diagraf.Node
    local g = diagraf.Graph:new{sig=sig, debug=true}
    local sr = sigrunes or params.sigrunes

    -- node generator
    local ng = function(n) return node:generator(g, n) end

    -- param generator
    local pg = function(prm, label)
        label = label or "param"
        -- assumes input prm is a callback that evals
        -- lua code

        prm1 = prm
        -- wrap callback into diagraf node generator,
        -- give it a label

        prm2 = ng(function(n, p)
            n.data.cb = prm1
            n.data.gen = function(self)
               return self.data.cb(self.data.g.eval)
            end
            n.data.constant = false
            n:label(label)
        end)

        -- call the generator to produce an instance
        prm3 = prm2()

        -- return the instance
        return prm3
    end
    -- fsig = sig:new()
    -- print(type(params.freq))
    freq = pg(params.freq or core.paramf(440), "freq")

    con = g:connector()
    -- saw = ng(sr.blsaw)()
    -- con(freq, saw.freq)

    ns = ng(sr.noise)()
    lpf = ng(sr.butlp)()
    con(ns, lpf.input)
    -- con(freq, lpf.cutoff)
    amp = pg(params.amp or core.paramf(0.8), "amp")
    eq = ng(sr.peakeq) {
        freq=500,
        bw=250,
        gain=2
    }

    con(lpf, eq.input)
    timbre = pg(params.timbre or core.paramf(0.5), "timbre")
    mtofr = ng(sr.mtof)
    addr = ng(sr.add)
    subr = ng(sr.sub)
    mulr = ng(sr.mul)

    mtof1 = mtofr()
    con(freq, mtof1.input)

    add1 = addr{b=0.1}
    con(freq, add1.a)
    mtof2 = mtofr()
    con(add1, mtof2.input)

    sub1 = subr{b=0.1}
    con(freq, sub1.a)
    mtof3 = mtofr()
    con(sub1, mtof3.input)

    sub2 = subr()

    con(mtof2, sub2.a)
    con(mtof3, sub2.b)

    butbp = ng(sr.butbp)()
    con(eq, butbp.input)
    con(mtof1, butbp.freq)
    con(sub2, butbp.bw)

    dblin = ng(sr.dblin)({db=10})
    mul1 = mulr {}
    con(butbp, mul1.a)
    con(dblin, mul1.b)


    blsq = ng(sr.blsquare)()
    con(mtof1, blsq.freq)
    mul2 = mulr{b=0.5}
    butlp = ng(sr.butlp){cutoff=300}
    buthp = ng(sr.buthp) {cutoff=300}
    con(blsq, mul2.a)
    con(mul2, butlp.input)
    con(butlp, buthp.input)

    cf = ng(sr.crossfade)()

    con(mul1, cf.a)
    con(buthp, cf.b)
    con(timbre, cf.pos)

    mul3 = mulr()

    con(cf, mul3.a)
    con(amp, mul3.b)

    g:process()
    l = topsort(g.edges)
    root = l[#l]
    pos = g:nsort_rec(l, g.nodes[root], #l)

    g:sort_the_setters(l, pos)
    g:setters_to_first_getters(l)
    g:nsort_rec(l, g.nodes[root], #l)

    g:print_node_list(l, "nodelist.txt")

    fp = io.open("tree.org", "w")
    prnt = function(str)
        fp:write(str .. "\n")
    end
    g:print_tree(l, g.nodes[l[#l]], #l, nil, prnt)
    fp:close()
    g:dot("test.dot")
    g:postprocess(l)



    -- for _, i in pairs(l) do
    --     local n = g.nodes[i]
    --     local label = n.data.label
    --     if label == nil then
    --         label = "N"
    --     end
    --     -- g.eval(string.format("# %s (%d)", label, n.data.id))
    --     n:compute()
    -- end

    -- freq()
    -- fsig:hold()
    -- lil("noise; butlp zz 2000; peakeq zz 500 250 2")

    -- fsig:get()
    -- lil("mtof zz")
    -- fsig:get()
    -- lil("add zz 0.1; mtof zz")
    -- fsig:get()

    -- lil("sub zz 0.1; mtof zz")
    -- lil("sub zz zz")
    -- lil("butbp zz zz zz; mul zz [dblin 10]")

    -- fsig:get()
    -- lil("blsquare [mtof zz]; mul zz [dblin -3]")
    -- lil("butlp zz 300; buthp zz 300")
    -- timbre()
    -- lil("crossfade zz zz zz")
    -- fsig:unhold()
    -- amp()
    -- lil("mul zz zz")
end
#+END_SRC
